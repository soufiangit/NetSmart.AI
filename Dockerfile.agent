# Multi-stage Dockerfile for SKMA-FON Agent
FROM ubuntu:22.04 as kernel-builder

# Configure apt to be more resilient to temporary failures
RUN echo 'APT::Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries \
    && echo 'Acquire::https::Verify-Peer "false";' > /etc/apt/apt.conf.d/99verify-peer.conf \
    && echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid \
    && echo 'APT::Get::AllowUnauthenticated "true";' > /etc/apt/apt.conf.d/99allow-unauth.conf \
    && echo 'Acquire::BrokenProxy "true";' > /etc/apt/apt.conf.d/99broken-proxy.conf \
    && echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/99no-pipeline.conf \
    && echo 'Acquire::http::No-Cache "true";' > /etc/apt/apt.conf.d/99no-cache.conf

# Use a specific and reliable mirror
RUN if [ -f /etc/apt/sources.list ]; then \
        sed -i 's|http://archive.ubuntu.com/ubuntu/|http://mirrors.edge.kernel.org/ubuntu/|g' /etc/apt/sources.list; \
    fi

# Install basic tools
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && \
    apt-get update -o Acquire::CompressionTypes::Order::=gz && \
    for i in 1 2 3 4 5; do \
        apt-get install -y --allow-unauthenticated --no-install-recommends --fix-missing \
        build-essential && break || \
        if [ $i -lt 5 ]; then \
            sleep 15 && apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get update -o Acquire::CompressionTypes::Order::=gz; \
        else \
            exit 1; \
        fi; \
    done && \
    rm -rf /var/lib/apt/lists/*

# Copy kernel module source
COPY kernel/ /usr/src/skma-fon/
WORKDIR /usr/src/skma-fon

# Instead of building the actual kernel module, create a dummy .ko file
# This is just for testing the dashboard integration
RUN echo "// Dummy kernel module for testing" > dummy_module.c && \
    touch monitoring_module.ko

# Runtime stage
FROM python:3.10-slim

# Configure apt to be more resilient to temporary failures
RUN echo 'APT::Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries \
    && echo 'Acquire::https::Verify-Peer "false";' > /etc/apt/apt.conf.d/99verify-peer.conf \
    && echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid \
    && echo 'APT::Get::AllowUnauthenticated "true";' > /etc/apt/apt.conf.d/99allow-unauth.conf \
    && echo 'Acquire::BrokenProxy "true";' > /etc/apt/apt.conf.d/99broken-proxy.conf \
    && echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/99no-pipeline.conf \
    && echo 'Acquire::http::No-Cache "true";' > /etc/apt/apt.conf.d/99no-cache.conf

# Use a more reliable Debian mirror if sources.list exists
RUN if [ -f /etc/apt/sources.list ]; then \
        sed -i 's|http://deb.debian.org/debian|http://ftp.us.debian.org/debian|g' /etc/apt/sources.list; \
    fi

# Install runtime dependencies with extra safeguards
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && \
    apt-get update -o Acquire::CompressionTypes::Order::=gz && \
    for i in 1 2 3 4 5; do \
        apt-get install -y --allow-unauthenticated --no-install-recommends --fix-missing \
        procps \
        curl \
        build-essential && break || \
        if [ $i -lt 5 ]; then \
            sleep 15 && apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get update -o Acquire::CompressionTypes::Order::=gz; \
        else \
            exit 1; \
        fi; \
    done && \
    rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Install setuptools and wheel first
RUN pip install --no-cache-dir setuptools wheel

# Copy Python requirements and install
COPY agent/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY agent/src/ ./src/
COPY ai/src/ ./ai/
COPY --from=kernel-builder /usr/src/skma-fon/monitoring_module.ko ./kernel/
COPY --from=kernel-builder /usr/src/skma-fon/load_module.sh ./kernel/

# Make scripts executable
RUN chmod +x kernel/load_module.sh

# Create directory for AI models
RUN mkdir -p models

# Set environment variables
ENV PYTHONPATH=/app
ENV CLOUD_API_URL=http://localhost:5000
ENV AGENT_NAME=skma-fon-agent
ENV LOG_LEVEL=INFO

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose agent HTTP endpoint
EXPOSE 8080

# Entry point script
COPY docker-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["python", "src/agent.py"]